name: Compile Apache Atlas
on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:
  discover-new-releases:
    name: Discover releases
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover-releases.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          path: apache-atlas-compiled

      - name: Discover Apache Atlas releases
        id: discover-releases
        run: |
          compiled=$(cat ./apache-atlas-compiled/compiled)
          versions=$(wget -qO- https://archive.apache.org/dist/atlas/ | grep -E "\[DIR" | sed "s#\(.*DIR.*href=\"\)\(.*\)/\"\(.*\)#\2#g" | grep -v "${compiled}" || echo "none")
          if [[ "${versions}" == "none" ]]; then
            matrix="none"
          else
            matrix=$(jq -cRn '[inputs as $version | $version] | { build: [{suffix: "", profile: "dist"}, {suffix: "-dev", profile: "dist,embedded-hbase-solr"}], version: . }' <<<"$versions")
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  
  build:
    name: Build Apache Atlas ${{ matrix.version }} with profile ${{ matrix.build.profile }}
    if: ${{ needs.discover-new-releases.outputs.matrix != 'none' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-new-releases.outputs.matrix) }}
    runs-on: ubuntu-latest
    needs: discover-new-releases
    steps:
      - name: Download Apache Atlas ${{ matrix.version }}
        id: download-atlas 
        run: |
          wget -nv "https://archive.apache.org/dist/atlas/${{ matrix.version }}/apache-atlas-${{ matrix.version }}-sources.tar.gz" -O "apache-atlas.tar.gz"
          wget -nv "https://archive.apache.org/dist/atlas/${{ matrix.version }}/apache-atlas-${{ matrix.version }}-sources.tar.gz.asc" -O "apache-atlas.tar.gz.asc"
          wget -nv "https://archive.apache.org/dist/atlas/KEYS" -O "atlas-KEYS"
          gpg --import atlas-KEYS
          gpg --verify apache-atlas.tar.gz.asc apache-atlas.tar.gz
          tar zxf apache-atlas.tar.gz

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3.9.0
        with:
          java-version: 8.0.352+8
          java-package: jdk
          architecture: x64
          distribution: temurin
      
      - name: Cache local Maven repository
        uses: actions/cache@v3.0.11
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Apache Atlas ${{ matrix.version }} with profile ${{ matrix.build.profile }}
        run: |
          cd apache-atlas-sources-${{ matrix.version }}
          mvn package -DskipTests -P${{ matrix.build.profile }}
          ls distro/target
        
      - name: Create release ${{ matrix.version }}${{ matrix.build.suffix }}
        id: create-release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.version }}${{ matrix.build.suffix }}
          release_name: Apache Atlas ${{ matrix.version }}${{ matrix.build.suffix }}
          body: Built with Maven profile "${{ matrix.build.profile }}"
          draft: false
          prerelease: false
        
      - name: Publish Apache Atlas ${{ matrix.version }}${{ matrix.build.suffix }}
        run: |
          cd apache-atlas-sources-${{ matrix.version }}/distro/target
          for asset in *.{tar.gz,jar,zip}; do
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: $(file -b --mime-type $asset)" --data-binary @$asset "${{ steps.create-release.outputs.upload_url }}=$(basename $asset)"
          done

      - name: Checkout Apache Atlas compiled
        uses: actions/checkout@v3.3.0
        with:
          path: apache-atlas-compiled

      - name: Check Apache Atlas ${{ matrix.version }} as released
        if: ${{ matrix.build.profile == 'dist' }}
        run: |
          cd apache-atlas-compiled
          git config user.email "z0beat@gmail.com"
          git config user.name "zer0beat"
          git pull --rebase origin master
          echo ${{ matrix.version }} >> ./compiled
          git add compiled
          git commit -m "Check Apache Atlas ${{ matrix.version }}${{ matrix.build.suffix }} as released"
          git push origin master